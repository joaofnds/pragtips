Tip #1, pg. xxi:\n\nCare About Your Craft\n\nWhy spend your life developing software unless you care about doing it well?
Tip #2, pg. xxi:\n\nThink! About Your Work\n\nTurn off the autopilot and take control. Constantly critique and appraise your work.
Tip #3, pg. 2:\n\nYou Have Agency\n\nIt’s your life. Grab hold of it and make it what you want.
Tip #4, pg. 4:\n\nProvide Options, Don’t Make Lame Excuses\n\nInstead of excuses, provide options. Don’t say it can’t be done; explain what can be done.
Tip #5, pg. 7:\n\nDon’t Live with Broken Windows\n\nFix bad designs, wrong decisions, and poor code when you see them.
Tip #6, pg. 9:\n\nBe a Catalyst for Change\n\nYou can’t force change on people. Instead, show them how the future might be and help them participate in creating it.
Tip #7, pg. 10:\n\nRemember the Big Picture\n\nDon’t get so engrossed in the details that you forget to check what’s happening around you.
Tip #8, pg. 12:\n\nMake Quality a Requirements Issue\n\nInvolve your users in determining the project’s real quality requirements.
Tip #9, pg. 15:\n\nInvest Regularly in Your Knowledge Portfolio\n\nMake learning a habit.
Tip #10, pg. 17:\n\nCritically Analyze What You Read and Hear\n\nDon’t be swayed by vendors, media hype, or dogma. Analyze information in terms of you and your project.
Tip #11, pg. 20:\n\nEnglish is Just Another Programming Language\n\nTreat English as Just Another Programming Language. Write documents as you would write code: honor the DRY principle, ETC, automation, and so on.
Tip #12, pg. 22:\n\nIt’s Both What You Say and the Way You Say It\n\nThere’s no point in having great ideas if you don’t communicate them effectively.
Tip #13, pg. 23:\n\nBuild Documentation In, Don’t Bolt It On\n\nDocumentation created separately from code is less likely to be correct and up to date.
Tip #14, pg. 28:\n\nGood Design Is Easier to Change Than Bad Design\n\nA thing is well designed if it adapts to the people who use it. For code, that means it must adapt by changing.
Tip #15, pg. 31:\n\nDRY—Don't Repeat Yourself\n\nEvery piece of knowledge must have a single, unambiguous, authoritative representation within a system.
Tip #16, pg. 38:\n\nMake It Easy to Reuse\n\nIf it’s easy to reuse, people will. Create an environment that supports reuse.
Tip #17, pg. 40:\n\nEliminate Effects Between Unrelated Things\n\nDesign components that are self-contained, independent, and have a single, well-defined purpose.
Tip #18, pg. 48:\n\nThere Are No Final Decisions\n\nNo decision is cast in stone. Instead, consider each as being written in the sand at the beach, and plan for change.
Tip #19, pg. 49:\n\nForgo Following Fads\n\nNeal Ford says, “Yesterday’s Best Practice Becomes Tomorrow’s Antipattern.” Choose architectures based on fundamentals, not fashion.
Tip #20, pg. 51:\n\nUse Tracer Bullets to Find the Target\n\nTracer bullets let you home in on your target by trying things and seeing how close they land.
Tip #21, pg. 57:\n\nPrototype to Learn\n\nPrototyping is a learning experience. Its value lies not in the code you produce, but in the lessons you learn.
Tip #22, pg. 60:\n\nProgram Close to the Problem Domain\n\nDesign and code in the language of the problem domain.
Tip #23, pg. 66:\n\nEstimate to Avoid Surprises\n\nEstimate before you start. You’ll spot potential problems up front.
Tip #24, pg. 70:\n\nIterate the Schedule with the Code\n\nUse experience you gain as you implement to refine the project time scales.
Tip #25, pg. 75:\n\nKeep Knowledge in Plain Text\n\nPlain text won’t become obsolete. It helps leverage your work and simplifies debugging and testing.
Tip #26, pg. 79:\n\nUse the Power of Command Shells\n\nUse the shell when graphical user interfaces don’t cut it.
Tip #27, pg. 81:\n\nAchieve Editor Fluency\n\nAn editor is your most important tool. Know how to make it do what you need, quickly and accurately.
Tip #28, pg. 85:\n\nAlways Use Version Control\n\nVersion control is a time machine for your work; you can go back.
Tip #29, pg. 89:\n\nFix the Problem, Not the Blame\n\nIt doesn’t really matter whether the bug is your fault or someone else’s—it is still your problem, and it still needs to be fixed.
Tip #30, pg. 89:\n\nDon’t Panic\n\nThis is true for galactic hitchhikers and for developers.
Tip #31, pg. 91:\n\nFailing Test Before Fixing Code\n\nCreate a focussed test that reveals the bug before you try fixing it.
Tip #32, pg. 92:\n\nRead the Damn Error Message\n\nMost exceptions tell both what failed and where it failed. If you’re lucky you might even get parameter values.
Tip #33, pg. 95:\n\n“select” Isn't Broken\n\nIt is rare to find a bug in the OS or the compiler, or even a third-party product or library. The bug is most likely in the application.
Tip #34, pg. 96:\n\nDon’t Assume It—Prove It\n\nProve your assumptions in the actual environment—with real data and boundary conditions.
Tip #35, pg. 98:\n\nLearn a Text Manipulation Language\n\nYou spend a large part of each day working with text. Why not have the computer do some of it for you?
Tip #36, pg. 102:\n\nYou Can’t Write Perfect Software\n\nSoftware can’t be perfect. Protect your code and users from the inevitable errors.
Tip #37, pg. 107:\n\nDesign with Contracts\n\nUse contracts to document and verify that code does no more and no less than it claims to do.
Tip #38, pg. 113:\n\nCrash Early\n\nA dead program normally does a lot less damage than a crippled one.
Tip #39, pg. 115:\n\nUse Assertions to Prevent the Impossible\n\nIf it can’t happen, use assertions to ensure that it won’t. Assertions validate your assumptions. Use them to protect your code from an uncertain world.
Tip #40, pg. 118:\n\nFinish What You Start\n\nWhere possible, the function or object that allocates a resource should be responsible for deallocating it.
Tip #41, pg. 121:\n\nAct Locally\n\nKeep the scope of mutable variables and open resources short and easily visible.
Tip #42, pg. 126:\n\nTake Small Steps—Always\n\nSmall steps always; check the feedback; and adjust before proceeding.
Tip #43, pg. 127:\n\nAvoid Fortune-Telling\n\nOnly look ahead as far as you can see.
Tip #44, pg. 131:\n\nDecoupled Code Is Easier to Change\n\nCoupling ties things together, so that it’s harder to change just one thing.
Tip #45, pg. 132:\n\nTell, Don’t Ask\n\nDon’t get values from an object, transform them, and then stick them back. Make the object do the work.
Tip #46, pg. 134:\n\nDon’t Chain Method Calls\n\nTry not to have more than one dot when you access something.
Tip #47, pg. 136:\n\nAvoid Global Data\n\nIt’s like adding an extra parameter to every method.
Tip #48, pg. 136:\n\nIf It’s Important Enough To Be Global, Wrap It in an API\n\n…but only if you really, really want it to be global.
Tip #49, pg. 149:\n\nProgramming Is About Code, But Programs Are About Data\n\nAll programs transform data, converting an input into an output. Start designing using transformations.
Tip #50, pg. 153:\n\nDon’t Hoard State; Pass It Around\n\nDon’t hang on to data within a function or module. Take one down and pass it around.
Tip #51, pg. 161:\n\nDon't Pay Inheritance Tax\n\nConsider alternatives that better fit your needs, such as interfaces, delegation, or mixins
Tip #52, pg. 162:\n\nPrefer Interfaces to Express Polymorphism\n\nInterfaces make polymorphism explicit without the coupling introduced by inheritance.
Tip #53, pg. 163:\n\nDelegate to Services: Has-A Trumps Is-A\n\nDon’t inherit from services: contain them.
Tip #54, pg. 165:\n\nUse Mixins to Share Functionality\n\nMixins add functionality to classes without the inheritance tax. Combine with interfaces for painless polymorphism.
Tip #55, pg. 166:\n\nParameterize Your App Using External Configuration\n\nWhen code relies on values that may change after the application has gone live, keep those values external to the app. When you application will run in different environments, and potentially for different customers, keep the environment and customer specific values outside the app.
Tip #56, pg. 171:\n\nAnalyze Workflow to Improve Concurrency\n\nExploit concurrency in your user’s workflow.
Tip #57, pg. 174:\n\nShared State Is Incorrect State\n\nShared state opens a large can of worms that can often only be fixed by rebooting.
Tip #58, pg. 180:\n\nRandom Failures Are Often Concurrency Issues\n\nVariations in timing and context can expose concurrency bugs, but in inconsistent and irreproducible ways.
Tip #59, pg. 182:\n\nUse Actors For Concurrency Without Shared State\n\nUse Actors to manage concurrent state without explicit synchronization.
Tip #60, pg. 189:\n\nUse Blackboards to Coordinate Workflow\n\nUse blackboards to coordinate disparate facts and agents, while maintaining independence and isolation among participants.
Tip #61, pg. 194:\n\nListen to Your Inner Lizard\n\nWhen it feels like your code is pushing back, it’s really your subconscious trying to tell you something’s wrong.
Tip #62, pg. 200:\n\nDon’t Program by Coincidence\n\nRely only on reliable things. Beware of accidental complexity, and don’t confuse a happy coincidence with a purposeful plan.
Tip #63, pg. 207:\n\nEstimate the Order of Your Algorithms\n\nGet a feel for how long things are likely to take before you write code.
Tip #64, pg. 208:\n\nTest Your Estimates\n\nMathematical analysis of algorithms doesn’t tell you everything. Try timing your code in its target environment.
Tip #65, pg. 212:\n\nRefactor Early, Refactor Often\n\nJust as you might weed and rearrange a garden, rewrite, rework, and re-architect code when it needs it. Fix the root of the problem.
Tip #66, pg. 214:\n\nTesting Is Not About Finding Bugs\n\nA test is a perspective into your code, and gives you feedback about its design, api, and coupling.
Tip #67, pg. 216:\n\nA Test Is the First User of Your Code\n\nUse its feedback to guide what you do.
Tip #68, pg. 218:\n\nBuild End-To-End, Not Top-Down or Bottom Up\n\nBuild small pieces of end-to-end functionality, learning about the problem as you go.
Tip #69, pg. 221:\n\nDesign to Test\n\nStart thinking about testing before you write a line of code.
Tip #70, pg. 223:\n\nTest Your Software, or Your Users Will\n\nTest ruthlessly. Don’t make your users find bugs for you.
Tip #71, pg. 224:\n\nUse Property-Based Tests to Validate Your Assumptions\n\nProperty-based tests will try things you never thought to try, and exercise your code in ways is wasn’t meant to be used.
Tip #72, pg. 234:\n\nKeep It Simple and Minimize Attack Surfaces\n\nComplex code creates a breeding ground for bugs and opportunities for attackers to exploit.
Tip #73, pg. 235:\n\nApply Security Patches Quickly\n\nAttackers deploy exploits as quick as they can, you have to be quicker.
Tip #74, pg. 242:\n\nName Well; Rename When Needed\n\nName to express your intent to readers, and rename as soon as that intent shifts.
Tip #75, pg. 244:\n\nNo One Knows Exactly What They Want\n\nThey might know a general direction, but they won’t know the twists and turns.
Tip #76, pg. 245:\n\nProgrammers Help People Understand What They Want\n\nSoftware development is an act of co-creation between users and programmers.
Tip #77, pg. 246:\n\nRequirements Are Learned in a Feedback Loop\n\nUnderstanding requirements requires exploration and feedback, so the consequences of decisions can be used to refine the initial ideas.
Tip #78, pg. 247:\n\nWork with a User to Think Like a User\n\nIt’s the best way to gain insight into how the system will really be used.
Tip #79, pg. 248:\n\nPolicy Is Metadata\n\nDon’t hardcode policy into a system; instead express it as metadata used by the system.
Tip #80, pg. 251:\n\nUse a Project Glossary\n\nCreate and maintain a single source of all the specific terms and vocabulary for a project.
Tip #81, pg. 254:\n\nDon’t Think Outside the Box—Find the Box\n\nWhen faced with an impossible problem, identify the real constraints. Ask yourself: “Does it have to be done this way? Does it have to be done at all?”
Tip #82, pg. 259:\n\nDon't Go into the Code Alone\n\nProgramming can be difficult and demanding. Take a friend with you.
Tip #83, pg. 259:\n\nAgile Is Not a Noun; Agile Is How You Do Things\n\nAgile is an adjective: it’s how you do something.
Tip #84, pg. 264:\n\nMaintain Small Stable Teams\n\nTeams should be small and stable, where everyone trusts each other and depends on each other.
Tip #85, pg. 266:\n\nSchedule It to Make It Happen\n\nIf you don’t schedule it, it’s not going to happen. Schedule reflection, experimentation, learning and skills improvement.
Tip #86, pg. 268:\n\nOrganize Fully Functional Teams\n\nOrganize Around Functionality, Not Job Functions. Don’t separate UI/UX designers from coders, frontend from backend, testers from data modelers, design from deployment. Build teams so you can build code end-to-end, incrementally and iteratively.
Tip #87, pg. 271:\n\nDo What Works, Not What’s Fashionable\n\nDon’t adopt a development method or technique just because other companies are doing it. Adopt what works for your team, in your context.
Tip #88, pg. 273:\n\nDeliver When Users Need It\n\nDon’t wait weeks or months to deliver just because your process demands it.
Tip #89, pg. 274:\n\nUse Version Control to Drive Builds, Tests, and Releases\n\nUse commits or pushes to trigger builds, tests, releases. Use a version control tag to deploy to production.
Tip #90, pg. 275:\n\nTest Early, Test Often, Test Automatically\n\nTests that run with every build are much more effective than test plans that sit on a shelf.
Tip #91, pg. 275:\n\nCoding Ain’t Done ’Til All the Tests Run\n\n’Nuff said.
Tip #92, pg. 277:\n\nUse Saboteurs to Test Your Testing\n\nIntroduce bugs on purpose in a separate copy of the source to verify that testing will catch them.
Tip #93, pg. 278:\n\nTest State Coverage, Not Code Coverage\n\nIdentify and test significant program states. Testing just lines of code isn’t enough.
Tip #94, pg. 278:\n\nFind Bugs Once\n\nOnce a human tester finds a bug, it should be the last time a human tester finds that bug. Automatic tests should check for it from then on.
Tip #95, pg. 279:\n\nDon't Use Manual Procedures\n\nA computer will execute the same instructions, in the same order, time after time.
Tip #96, pg. 281:\n\nDelight Users, Don’t Just Deliver Code\n\nDevelop solutions that produce business value for your users and delight them every day.
Tip #97, pg. 282:\n\nSign Your Work\n\nArtisans of an earlier age were proud to sign their work. You should be, too.
Tip #98, pg. 286:\n\nFirst, Do No Harm\n\nFailure is inevitable. Make sure no one will suffer because of it.
Tip #99, pg. 287:\n\nDon’t Enable Scumbags\n\nBecause you risk becoming one, too.
Tip #100, pg. 287:\n\nIt’s Your Life. Share it. Celebrate it. Build it. AND HAVE FUN!\n\nEnjoy this amazing life we have, and do great things.
